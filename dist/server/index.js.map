{"version":3,"sources":["../../src/server/index.js"],"names":["upload","dest","app","DEV","process","env","NODE_ENV","STATIC_DIR","use","require","default","render","static","__dirname","get","req","res","next","accepts","context","path","url","content","status","type","send","post","single","file","err","buffer","console","log","sendStatus","json","body","secret","toString","plaintext","server","listen","PORT","address","port"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;AACA;;;;;;AAEA,MAAMA,SAAS,sBAAO,EAAEC,MAAM,UAAR,EAAP,CAAf;;AAEA,MAAMC,MAAM,wBAAZ;AACA,MAAMC,MAAMC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,aAArC;AACA,MAAMC,aAAa,WAAnB;;AAEAL,IAAIM,GAAJ,CAAQ,4BAAR;AACA,IAAIL,GAAJ,EAAS;AACPD,MAAIM,GAAJ,CAAQC,QAAQ,0BAAR,EAAoCC,OAA5C;AACD,CAFD,MAEO;AACL,QAAMC,SAASF,QAAQ,WAAR,EAAqBC,OAApC;AACAR,MAAIM,GAAJ,CAAQ,SAAR,EAAmB,kBAAQI,MAAR,CAAe,mBAAQC,SAAR,EAAmBN,UAAnB,CAAf,CAAnB;AACAL,MAAIY,GAAJ,CAAQ,GAAR,EAAa,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AAC/B,QAAIF,IAAIG,OAAJ,CAAY,MAAZ,CAAJ,EAAyB;AACvB,YAAMC,UAAU,EAAhB;AACA,YAAMC,OAAO,qBAAUL,IAAIM,GAAd,CAAb;AACA,YAAMC,UAAUX,OAAOS,IAAP,EAAaD,OAAb,CAAhB;AACA,UAAIA,QAAQI,MAAR,KAAmB,GAAvB,EAA4B;AAC1BP,YAAIO,MAAJ,CAAW,GAAX;AACD;AACDP,UAAIQ,IAAJ,CAAS,MAAT;AACAR,UAAIS,IAAJ,CAASH,OAAT;AACD,KATD,MASO;AACLL;AACD;AACF,GAbD;AAcD;;AAEDf,IAAIwB,IAAJ,CAAS,WAAT,EAAsB1B,OAAO2B,MAAP,CAAc,WAAd,CAAtB,EAAkD,CAACZ,GAAD,EAAMC,GAAN,KAAc;AAC9D,MAAID,IAAIa,IAAJ,IAAY,uBAAYb,IAAIa,IAAhB,CAAhB,EAAuC;AACrC,sBAASb,IAAIa,IAAJ,CAASR,IAAlB,EAAwB,CAACS,GAAD,EAAMC,MAAN,KAAiB;AACvC,UAAID,GAAJ,EAAS;AACPE,gBAAQC,GAAR,CAAYH,GAAZ;AACAb,YAAIiB,UAAJ,CAAe,GAAf;AACA;AACD;AACDjB,UAAIO,MAAJ,CAAW,GAAX,EAAgBW,IAAhB,CAAqB,wBAASnB,IAAIoB,IAAJ,CAASC,MAAlB,EAA0BN,OAAOO,QAAP,EAA1B,CAArB;AACD,KAPD;AAQD,GATD,MASO,IAAItB,IAAIoB,IAAJ,CAASG,SAAb,EAAwB;AAC7BtB,QAAIO,MAAJ,CAAW,GAAX,EAAgBW,IAAhB,CAAqB,wBAASnB,IAAIoB,IAAJ,CAASC,MAAlB,EAA0BrB,IAAIoB,IAAJ,CAASG,SAAnC,CAArB;AACD,GAFM,MAEA;AACLtB,QAAIiB,UAAJ,CAAe,GAAf;AACD;AACF,CAfD;;AAiBA,MAAMM,SAASrC,IAAIsC,MAAJ,CAAWpC,QAAQC,GAAR,CAAYoC,IAAZ,IAAoB,IAA/B,EAAqC,MAAM;AACxDV,UAAQC,GAAR,CAAa,+BAA8BO,OAAOG,OAAP,GAAiBC,IAAK,EAAjE;AACD,CAFc,CAAf","file":"index.js","sourcesContent":["import express from 'express'\nimport compression from 'compression'\nimport multer from 'multer'\nimport { readFile } from 'fs'\nimport { resolve } from 'path'\nimport { isPlainFile, plainPath } from '../util'\nimport playfair from './playfair'\n\nconst upload = multer({ dest: 'uploads/' })\n\nconst app = express()\nconst DEV = process.env.NODE_ENV === 'development'\nconst STATIC_DIR = '../static'\n\napp.use(compression())\nif (DEV) {\n  app.use(require('../webpack/hotMiddleware').default)\n} else {\n  const render = require('../render').default\n  app.use('/static', express.static(resolve(__dirname, STATIC_DIR)))\n  app.get('*', (req, res, next) => {\n    if (req.accepts('html')) {\n      const context = {}\n      const path = plainPath(req.url)\n      const content = render(path, context)\n      if (context.status === 404) {\n        res.status(404)\n      }\n      res.type('html')\n      res.send(content)\n    } else {\n      next()\n    }\n  })\n}\n\napp.post('/playfair', upload.single('plaintext'), (req, res) => {\n  if (req.file && isPlainFile(req.file)) {\n    readFile(req.file.path, (err, buffer) => {\n      if (err) {\n        console.log(err)\n        res.sendStatus(500)\n        return\n      }\n      res.status(200).json(playfair(req.body.secret, buffer.toString()))\n    })\n  } else if (req.body.plaintext) {\n    res.status(200).json(playfair(req.body.secret, req.body.plaintext))\n  } else {\n    res.sendStatus(400)\n  }\n})\n\nconst server = app.listen(process.env.PORT || 3000, () => {\n  console.log(`Serving on http://localhost:${server.address().port}`)\n})\n"]}