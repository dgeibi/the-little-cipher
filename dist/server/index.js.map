{"version":3,"sources":["../../src/server/index.js"],"names":["upload","dest","app","DEV","process","env","NODE_ENV","STATIC_DIR","use","require","default","render","titleMap","static","__dirname","get","req","res","next","accepts","context","path","url","content","dvaOpts","history","createMemoryHistory","routerProps","location","routeProps","currentPath","templateOpts","title","status","send","post","single","file","err","buffer","console","log","sendStatus","json","body","secret","toString","plaintext","server","listen","PORT","address","port"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;AACA;;;;;;AAEA,MAAMA,SAAS,sBAAO,EAAEC,MAAM,UAAR,EAAP,CAAf;;AAEA,MAAMC,MAAM,wBAAZ;AACA,MAAMC,MAAMC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,aAArC;AACA,MAAMC,aAAa,WAAnB;;AAEAL,IAAIM,GAAJ,CAAQ,4BAAR;AACA,IAAIL,GAAJ,EAAS;AACPD,MAAIM,GAAJ,CAAQC,QAAQ,kBAAR,EAA4BC,OAApC;AACD,CAFD,MAEO;AACL,QAAM,EAAEC,MAAF,EAAUC,QAAV,KAAuBH,QAAQ,eAAR,CAA7B;AACAP,MAAIM,GAAJ,CAAQ,SAAR,EAAmB,kBAAQK,MAAR,CAAe,mBAAQC,SAAR,EAAmBP,UAAnB,CAAf,CAAnB;AACAL,MAAIa,GAAJ,CAAQ,GAAR,EAAa,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AAC/B,QAAIF,IAAIG,OAAJ,CAAY,MAAZ,CAAJ,EAAyB;AACvB,YAAMC,UAAU,EAAhB;AACA,YAAMC,OAAO,qBAAUL,IAAIM,GAAd,CAAb;AACA,YAAMC,UAAUZ,OAAO;AACrBa,iBAAS;AACPC,mBAAShB,QAAQ,SAAR,EAAmBiB,mBAAnB;AADF,SADY;AAIrBC,qBAAa,EAAEC,UAAUP,IAAZ,EAAkBD,OAAlB,EAJQ;AAKrBS,oBAAY,EAAEC,aAAaT,IAAf,EALS;AAMrBU,sBAAc,EAAEC,OAAOpB,SAASS,IAAT,CAAT;AANO,OAAP,CAAhB;AAQA,UAAID,QAAQa,MAAR,KAAmB,GAAvB,EAA4B;AAC1BhB,YAAIgB,MAAJ,CAAW,GAAX;AACD;AACDhB,UAAIiB,IAAJ,CAASX,OAAT;AACD,KAfD,MAeO;AACLL;AACD;AACF,GAnBD;AAoBD;;AAEDhB,IAAIiC,IAAJ,CAAS,WAAT,EAAsBnC,OAAOoC,MAAP,CAAc,WAAd,CAAtB,EAAkD,CAACpB,GAAD,EAAMC,GAAN,KAAc;AAC9D,MAAID,IAAIqB,IAAJ,IAAY,uBAAYrB,IAAIqB,IAAhB,CAAhB,EAAuC;AACrC,sBAASrB,IAAIqB,IAAJ,CAAShB,IAAlB,EAAwB,CAACiB,GAAD,EAAMC,MAAN,KAAiB;AACvC,UAAID,GAAJ,EAAS;AACPE,gBAAQC,GAAR,CAAYH,GAAZ;AACArB,YAAIyB,UAAJ,CAAe,GAAf;AACA;AACD;AACDzB,UAAIgB,MAAJ,CAAW,GAAX,EAAgBU,IAAhB,CAAqB,wBAAS3B,IAAI4B,IAAJ,CAASC,MAAlB,EAA0BN,OAAOO,QAAP,EAA1B,CAArB;AACD,KAPD;AAQD,GATD,MASO,IAAI9B,IAAI4B,IAAJ,CAASG,SAAb,EAAwB;AAC7B9B,QAAIgB,MAAJ,CAAW,GAAX,EAAgBU,IAAhB,CAAqB,wBAAS3B,IAAI4B,IAAJ,CAASC,MAAlB,EAA0B7B,IAAI4B,IAAJ,CAASG,SAAnC,CAArB;AACD,GAFM,MAEA;AACL9B,QAAIyB,UAAJ,CAAe,GAAf;AACD;AACF,CAfD;;AAiBA,MAAMM,SAAS9C,IAAI+C,MAAJ,CAAW7C,QAAQC,GAAR,CAAY6C,IAAZ,IAAoB,IAA/B,EAAqC,MAAM;AACxDV,UAAQC,GAAR,CAAa,+BAA8BO,OAAOG,OAAP,GAAiBC,IAAK,EAAjE;AACD,CAFc,CAAf","file":"index.js","sourcesContent":["import express from 'express'\nimport compression from 'compression'\nimport multer from 'multer'\nimport { readFile } from 'fs'\nimport { resolve } from 'path'\nimport { isPlainFile, plainPath } from '../util'\nimport playfair from './playfair'\n\nconst upload = multer({ dest: 'uploads/' })\n\nconst app = express()\nconst DEV = process.env.NODE_ENV === 'development'\nconst STATIC_DIR = '../static'\n\napp.use(compression())\nif (DEV) {\n  app.use(require('./middleware/hot').default)\n} else {\n  const { render, titleMap } = require('./renderRoute')\n  app.use('/static', express.static(resolve(__dirname, STATIC_DIR)))\n  app.get('*', (req, res, next) => {\n    if (req.accepts('html')) {\n      const context = {}\n      const path = plainPath(req.url)\n      const content = render({\n        dvaOpts: {\n          history: require('history').createMemoryHistory(),\n        },\n        routerProps: { location: path, context },\n        routeProps: { currentPath: path },\n        templateOpts: { title: titleMap[path] },\n      })\n      if (context.status === 404) {\n        res.status(404)\n      }\n      res.send(content)\n    } else {\n      next()\n    }\n  })\n}\n\napp.post('/playfair', upload.single('plaintext'), (req, res) => {\n  if (req.file && isPlainFile(req.file)) {\n    readFile(req.file.path, (err, buffer) => {\n      if (err) {\n        console.log(err)\n        res.sendStatus(500)\n        return\n      }\n      res.status(200).json(playfair(req.body.secret, buffer.toString()))\n    })\n  } else if (req.body.plaintext) {\n    res.status(200).json(playfair(req.body.secret, req.body.plaintext))\n  } else {\n    res.sendStatus(400)\n  }\n})\n\nconst server = app.listen(process.env.PORT || 3000, () => {\n  console.log(`Serving on http://localhost:${server.address().port}`)\n})\n"]}