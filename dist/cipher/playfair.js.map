{"version":3,"sources":["../../src/cipher/playfair.js"],"names":["types","SAME_ROW","SAME_CLO","CROSS","findType","code","FALLBACK1","FALLBACK2","getFallback","c","toChars","secret","schars","toUpperCase","split","filter","i","offset","char","String","fromCharCode","push","Set","add1","a","toIJ","index","Math","floor","toIndex","j","mvRight","mvDown","transform","pair","chars","b","aI","aJ","indexOf","bI","bJ","getPairs","inputs","length","fallback","concat","slice","toSquare","count","square","playfair","input","replace","pairs","diff","map","type","origin","join","result","cipherString","results","reduce","str","originalString"],"mappings":"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","file":"playfair.js","sourcesContent":["import { codeOf, isUpperCase } from '../util'\n\nconst types = {\n  SAME_ROW: 1,\n  SAME_CLO: 2,\n  CROSS: 3,\n}\n\nfunction findType(code) {\n  switch (code) {\n    case types.CROSS:\n      return '交叉'\n    case types.SAME_CLO:\n      return '同列'\n    case types.SAME_ROW:\n      return '同行'\n    default:\n      return '未知'\n  }\n}\n\nconst FALLBACK1 = 'K'\nconst FALLBACK2 = 'Z'\nconst getFallback = c => (c === FALLBACK1 ? FALLBACK2 : FALLBACK1)\n\n/**\n * @param {string} secret\n */\nconst toChars = (secret) => {\n  const schars = secret.toUpperCase().split('').filter(isUpperCase)\n\n  for (let i = 0, offset = codeOf('A'); i < 26; i += 1) {\n    const char = String.fromCharCode(offset + i)\n    if (char !== 'J') schars.push(char)\n  }\n  return [...new Set(schars)]\n}\n\nconst add1 = a => (a + 1) % 5\nconst toIJ = index => [Math.floor(index / 5), index % 5]\nconst toIndex = (i, j) => i * 5 + j\nconst mvRight = (i, j) => toIndex(i, add1(j))\nconst mvDown = (i, j) => toIndex(add1(i), j)\n\n/**\n *\n * @param {number} b\n */\nconst transform = (pair, chars) => {\n  const [a, b] = pair\n  const [aI, aJ] = toIJ(chars.indexOf(a))\n  const [bI, bJ] = toIJ(chars.indexOf(b))\n\n  // 同行\n  if (aI === bI) {\n    return [chars[mvRight(aI, aJ)], chars[mvRight(bI, bJ)], types.SAME_ROW]\n  }\n  // 同列\n  if (aJ === bJ) {\n    return [chars[mvDown(aI, aJ)], chars[mvDown(bI, bJ)], types.SAME_CLO]\n  }\n  // 交叉\n  return [chars[toIndex(aI, bJ)], chars[toIndex(bI, aJ)], types.CROSS]\n}\n\n/**\n * @param {string[]} inputs\n * @return {[string, string][]}\n */\nconst getPairs = (inputs) => {\n  if (inputs.length < 1) return []\n  if (inputs.length === 1) {\n    const c = inputs[0]\n    return [[c, getFallback(c)]]\n  }\n  const a = inputs[0]\n  const b = inputs[1]\n  if (a === b) {\n    const fallback = getFallback(a)\n    return [[a, fallback]].concat(getPairs(inputs.slice(1)))\n  }\n  return [[a, b]].concat(getPairs(inputs.slice(2)))\n}\n\nconst toSquare = (chars) => {\n  let count = 0\n  const square = []\n  while (count < 5) {\n    const offset = count * 5\n    square.push(chars.slice(offset, offset + 5))\n    count += 1\n  }\n  return square\n}\n\n/**\n * @param {string} secret\n * @param {string} input\n */\nconst playfair = (secret, input) => {\n  const chars = toChars(secret)\n  const square = toSquare(chars)\n  const inputs = input.toUpperCase().replace(/J/g, 'I').split('').filter(isUpperCase)\n  const pairs = getPairs(inputs)\n  const diff = pairs.map((pair) => {\n    const [a, b, type] = transform(pair, chars)\n    return {\n      origin: pair.join(''),\n      result: a + b,\n      type,\n    }\n  })\n  return {\n    diff,\n    square,\n  }\n}\n\nconst cipherString = results => results.reduce((str, { result }) => str + result, '')\nconst originalString = results => results.reduce((str, { origin }) => str + origin, '')\n\nexport { cipherString, originalString, playfair, types, findType }\n"]}