{"version":3,"sources":["../../src/matrix/index.js"],"names":["fromLat","lat","length","Math","sqrt","i","matrix","offset","push","slice","restOf","mi","mj","rest","colLength","row","j","det","a","b","c","d","sum","sign","adjugate","Array","transpose","inverse","de","Number","toFixed","inv","map","x","input","cLength","rLength","output","multiply","rows","rIndex","cIndex","reduce","v","fn","r"],"mappings":"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","file":"index.js","sourcesContent":["/**\n * @typedef {number[][]} Matrix\n * @typedef {number[]} Lat\n */\n\n/**\n * @param {Lat} lat\n * @returns {Matrix}\n */\nfunction fromLat(lat) {\n  const length = Math.sqrt(lat.length)\n  let i = 0\n  const matrix = []\n  while (i < length) {\n    const offset = i * length\n    matrix.push(lat.slice(offset, offset + length))\n    i += 1\n  }\n  return matrix\n}\n\n/**\n * 求余子矩阵\n * @param {Matrix} matrix\n * @param {number} mi\n * @param {number} mj\n * @returns {Matrix}\n */\nfunction restOf(matrix, mi, mj) {\n  const rest = []\n  for (let i = 0; i < matrix.length; i += 1) {\n    if (mi !== i) {\n      const colLength = matrix[i].length\n      const row = []\n      rest.push(row)\n      for (let j = 0; j < colLength; j += 1) {\n        if (mj !== j) {\n          row.push(matrix[i][j])\n        }\n      }\n    }\n  }\n  return rest\n}\n\n/**\n * 求行列式\n * @param {Matrix} matrix\n */\nfunction det(matrix) {\n  if (matrix.length === 1) return matrix[0][0]\n  if (matrix.length === 2) {\n    const [[a, b], [c, d]] = matrix\n    return a * d - b * c\n  }\n  let sum = 0\n  for (let j = 0, sign = 1; j < matrix.length; j += 1, sign *= -1) {\n    sum += matrix[0][j] * det(restOf(matrix, 0, j)) * sign\n  }\n  return sum\n}\n\nfunction adjugate(matrix) {\n  const c = new Array(matrix.length)\n  for (let i = 0; i < matrix.length; i += 1) {\n    c[i] = new Array(matrix.length)\n    for (let j = 0; j < matrix.length; j += 1) {\n      const sign = (i + j) % 2 === 0 ? 1 : -1\n      c[i][j] = det(restOf(matrix, i, j)) * sign\n    }\n  }\n  return transpose(c)\n}\n\n/**\n * 求逆矩阵\n * @param {Matrix} matrix\n * @returns {?Matrix}\n */\nfunction inverse(matrix) {\n  const de = det(matrix)\n  if (Number(de.toFixed(7)) === 0) return null\n  const inv = map(adjugate(matrix), x => x / de)\n  return inv\n}\n\n/**\n * 求转置矩阵\n * @param {Matrix} input\n * @returns {Matrix}\n */\nfunction transpose(input) {\n  const cLength = input && input.length\n  const rLength = input[0] && input[0].length\n  if (rLength > 0) {\n    const output = []\n    for (let i = 0; i < rLength; i += 1) {\n      const row = []\n      output[i] = row\n      for (let j = 0; j < cLength; j += 1) {\n        row[j] = input[j][i]\n      }\n    }\n    return output\n  }\n  return null\n}\n\n/**\n * 矩阵乘法\n * @param {Matrix} a\n * @param {Matrix} b\n * @returns {Matrix}\n */\nfunction multiply(a, b) {\n  const rLength = a.length\n  const cLength = b[0].length\n  const rows = []\n  for (let rIndex = 0; rIndex < rLength; rIndex += 1) {\n    const row = []\n    rows[rIndex] = row\n    for (let cIndex = 0; cIndex < cLength; cIndex += 1) {\n      row[cIndex] = a[rIndex].reduce((sum, v, i) => v * b[i][cIndex] + sum, 0)\n    }\n  }\n  return rows\n}\n\n/**\n * @param {Matrix} matrix\n * @param {function} fn\n */\nfunction map(matrix, fn) {\n  return matrix.map(r => r.map(fn))\n}\n\nexport { multiply, transpose, map, fromLat, det, adjugate, inverse }\n"]}