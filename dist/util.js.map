{"version":3,"sources":["../src/util.js"],"names":["mod","modInverse","repeat","isPlainFile","isUpperCase","c","codeOf","str","String","charCodeAt","x","y","NaN","m","Math","abs","gcd","a","b","num","i","time","fn","cnt","rets","push","file","test","type","mimetype"],"mappings":";;;;;QASgBA,G,GAAAA,G;QAoBAC,U,GAAAA,U;QASAC,M,GAAAA,M;QAUAC,W,GAAAA,W;AAhDT,MAAMC,oCAAcC,KAAKA,KAAK,GAAL,IAAYA,KAAK,GAA1C;;AAEA,MAAMC,0BAASC,OAAOC,OAAOD,GAAP,EAAYE,UAAZ,CAAuB,CAAvB,CAAtB;;AAEP;;;;;AAKO,SAAST,GAAT,CAAaU,CAAb,EAAgBC,CAAhB,EAAmB;AACxB,MAAIA,MAAM,CAAV,EAAa,OAAOC,GAAP;AACb,MAAIC,IAAIH,IAAIC,CAAZ;AACA,MAAIE,IAAI,CAAR,EAAW;AACTA,QAAIC,KAAKC,GAAL,CAASJ,CAAT,IAAcE,CAAlB;AACD;AACD,SAAOA,CAAP;AACD;;AAED;;;;;AAKO,MAAMG,oBAAM,CAACC,CAAD,EAAIC,CAAJ,KAAWA,MAAM,CAAN,GAAUD,CAAV,GAAcD,IAAIE,CAAJ,EAAOlB,IAAIiB,CAAJ,EAAOC,CAAP,CAAP,CAArC;;AAEP;;;;AAIO,SAASjB,UAAT,CAAoBkB,GAApB,EAAyBN,CAAzB,EAA4B;AACjC,MAAIM,QAAQ,CAAR,IAAaH,IAAIG,GAAJ,EAASN,CAAT,IAAc,CAA/B,EAAkC,OAAOD,GAAP;AAClC,MAAIQ,IAAI,CAAR;AACA,SAAOpB,IAAIoB,IAAID,GAAR,EAAaN,CAAb,MAAoB,CAA3B,EAA8B;AAC5BO,SAAK,CAAL;AACD;AACD,SAAOA,CAAP;AACD;;AAEM,SAASlB,MAAT,CAAgBmB,IAAhB,EAAsBC,EAAtB,EAA0B;AAC/B,MAAIC,MAAM,CAAV;AACA,QAAMC,OAAO,EAAb;AACA,SAAOD,MAAMF,IAAb,EAAmB;AACjBG,SAAKC,IAAL,CAAUH,IAAV;AACAC,WAAO,CAAP;AACD;AACD,SAAOC,IAAP;AACD;;AAEM,SAASrB,WAAT,CAAqBuB,IAArB,EAA2B;AAChC,SAAO,qCAAoCC,IAApC,CAAyCD,KAAKE,IAAL,IAAaF,KAAKG,QAA3D;AAAP;AACD","file":"util.js","sourcesContent":["export const isUpperCase = c => c >= 'A' && c <= 'Z'\n\nexport const codeOf = str => String(str).charCodeAt(0)\n\n/**\n * @param {number} x\n * @param {number} y\n * @returns {number}\n */\nexport function mod(x, y) {\n  if (y === 0) return NaN\n  let m = x % y\n  if (m < 0) {\n    m = Math.abs(y) + m\n  }\n  return m\n}\n\n/**\n * @param {number} a\n * @param {number} b\n * @returns {number}\n */\nexport const gcd = (a, b) => (b === 0 ? a : gcd(b, mod(a, b)))\n\n/**\n * @param {number} num\n * @param {number} m\n */\nexport function modInverse(num, m) {\n  if (num === 0 || gcd(num, m) > 1) return NaN\n  let i = 1\n  while (mod(i * num, m) !== 1) {\n    i += 1\n  }\n  return i\n}\n\nexport function repeat(time, fn) {\n  let cnt = 0\n  const rets = []\n  while (cnt < time) {\n    rets.push(fn())\n    cnt += 1\n  }\n  return rets\n}\n\nexport function isPlainFile(file) {\n  return /text|javascript|html|css|xml|json/.test(file.type || file.mimetype)\n}\n"]}